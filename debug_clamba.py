#!/usr/bin/env python3
"""
Debug CLAMBA - Voir la r√©ponse brute de l'IA
"""

from clamba.core.pdf_extractor import PDFExtractor
from clamba.ai.factory import AIProviderFactory
from clamba.config.settings import CLAMBAConfig
from pathlib import Path

def debug_ai_response():
    """D√©boguer la r√©ponse de l'IA"""
    
    print("üîç DEBUG CLAMBA - R√©ponse IA")
    print("=" * 50)
    
    # Charger config
    config = CLAMBAConfig.from_file("clamba_config.yaml")
    print(f"‚úÖ Config: {config.ai.provider}")
    
    # Extraire le texte du PDF
    pdf_path = Path("tests/contrat_prestation_service_voiture.pdf")
    extractor = PDFExtractor()
    
    try:
        contract_text = extractor.extract_text(pdf_path)
        print(f"‚úÖ PDF extrait: {len(contract_text)} caract√®res")
        print("\nüìÑ EXTRAIT DU CONTRAT:")
        print("-" * 30)
        print(contract_text[:500] + "..." if len(contract_text) > 500 else contract_text)
        print("-" * 30)
    except Exception as e:
        print(f"‚ùå Erreur extraction PDF: {e}")
        return
    
    # Initialiser l'IA
    try:
        ai_provider = AIProviderFactory.create_provider(config)
        print(f"‚úÖ Provider IA: {ai_provider.get_provider_name()}")
    except Exception as e:
        print(f"‚ùå Erreur provider IA: {e}")
        return
    
    # Tester la connexion
    if not ai_provider.test_connection():
        print("‚ùå Connexion IA √©chou√©e")
        return
    
    print("‚úÖ Connexion IA OK")
    
    # Construire le prompt manuel (simplifi√©)
    prompt = f"""Tu es un EXPERT SENIOR EN ANALYSE CONTRACTUELLE.

MISSION: Analyser ce contrat pour identifier les PROCESSUS M√âTIER DISTINCTS.

CONTRAT √Ä ANALYSER:
{contract_text[:2000]}

R√àGLES:
- Minimum 3 processus, maximum 6 processus
- Chaque processus = 3-7 √©tapes maximum
- Processus ACTIONNABLE et MESURABLE
- Format JSON STRICT obligatoire

FORMAT JSON EXACT:
[
  {{
    "id": "01",
    "name": "Nom du processus",
    "description": "Description du processus",
    "steps": ["√©tape_1", "√©tape_2", "√©tape_3"],
    "responsible_party": "Qui est responsable",
    "triggers": "Quand d√©marre ce processus"
  }}
]

ANALYSER LE CONTRAT ET IDENTIFIER LES PROCESSUS:"""
    
    print(f"\nüìù PROMPT ENVOY√â ({len(prompt)} caract√®res):")
    print("-" * 30)
    print(prompt[-500:])  # Derniers 500 chars
    print("-" * 30)
    
    # Envoyer le prompt
    try:
        print("\nü§ñ Envoi √† l'IA... (peut prendre 30-60s)")
        response = ai_provider.query(prompt)
        
        print(f"\nüì• R√âPONSE BRUTE IA ({len(response)} caract√®res):")
        print("=" * 50)
        print(response)
        print("=" * 50)
        
        # Analyser la r√©ponse
        if "[" in response and "]" in response:
            print("‚úÖ JSON array d√©tect√© dans la r√©ponse")
            
            # Essayer d'extraire le JSON
            start = response.find('[')
            end = response.rfind(']') + 1
            json_part = response[start:end]
            
            print(f"\nüì¶ JSON EXTRAIT:")
            print("-" * 30)
            print(json_part)
            print("-" * 30)
            
            # Essayer de parser
            try:
                import json
                data = json.loads(json_part)
                print(f"‚úÖ JSON valide: {len(data)} processus d√©tect√©s")
                for i, proc in enumerate(data, 1):
                    print(f"   {i}. {proc.get('name', 'Nom manquant')}")
            except json.JSONDecodeError as e:
                print(f"‚ùå JSON invalide: {e}")
        else:
            print("‚ùå Aucun JSON array trouv√© dans la r√©ponse")
            print("\nüí° L'IA n'a pas respect√© le format demand√©")
        
    except Exception as e:
        print(f"‚ùå Erreur requ√™te IA: {e}")

def test_simple_prompt():
    """Test avec un prompt ultra-simple"""
    
    print("\n" + "=" * 50)
    print("üß™ TEST PROMPT SIMPLE")
    print("=" * 50)
    
    config = CLAMBAConfig.from_file("clamba_config.yaml")
    ai_provider = AIProviderFactory.create_provider(config)
    
    simple_prompt = """R√©ponds uniquement avec ce JSON exact:
[
  {
    "id": "01",
    "name": "Test Process",
    "description": "Un processus de test",
    "steps": ["step1", "step2", "step3"],
    "responsible_party": "Test",
    "triggers": "Test trigger"
  }
]"""
    
    print("üìù Prompt simple envoy√©...")
    try:
        response = ai_provider.query(simple_prompt)
        print(f"üì• R√©ponse: {response}")
        
        if "[" in response and "]" in response:
            print("‚úÖ Format JSON d√©tect√©")
        else:
            print("‚ùå Format JSON non d√©tect√©")
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")

if __name__ == "__main__":
    debug_ai_response()
    test_simple_prompt()